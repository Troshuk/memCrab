*****1. Порождающие шаблоны проектирования (Creational):
1.1. Абстрактная фабрика (Abstract Factory) - 
	ОРМ(Об'єктно-реляційне відображення), яке буде підтримувати різноманітні СУБД - MySQL, Oracle...
	Інтерфейс фабрики, яка буде створювати усі необхідні компоненти системи:
	- з'єднання з БД
	- запис таблиці БД
	- конструктор запитів до БД
	-...
	Написати фабрики, що реалізують даний інтерфейс,
	кожна фабрика повертає об'єкт відповідний СУБД.
1.2. Строитель (Builder) - 
	Отделяет конструирование сложного объекта от его представления, так что в результате одного и того же процесса конструирования могут получаться разные представления.
	-Когда в программе для чтения текста в формате RTF добавляется функционал его преобразования в форматы ASCII и TeX.
1.3. Фабричный Метод (Factory Method) - 
	Фабрика, яка уже створює конкретний об'єкт сама, маючи метод для отримання екземпляра об'єкта, якого створює дана фабрика.
	-Категорії продуктів у інтернет магазині
1.4. Объектный пул (Pool) + (Multiton) - зберігання об'єктів які потребують затрат у 	пам'яті: БД, сокети, великі графічні об'єкти, шрифти, 
	растрові зображення.
	 - при використанні багатьох Сінгелтонів
1.5. Прототип (Prototype)
	-створ класів динамічним шляхом, підтягування з БД, XML.
	-зменшення кількості абстрактних класів.
1.6. Одиночка (Singleton) - 
	З'єднання з БД, якщо з'єднання з БД існує, то просто поверне об'єкт уже існуючого з'єднання
*****2. Структурные шаблоны проектирования (Structural):
2.1. Адаптер (Adapter / Wrapper) - 
	- вибір соц мережі, у якій поділитися даним постом.
	- реалізація підкючень до різних БД.
	/використ існуючого класу з іншим інтерфейсом або об'єднання інтерфейсів
	-система оплати (PayPal) - якщо щось зміниться, то метод який до цього використовувався для оплати у багатьох місцях не потрібно буде змінювати, а лише в Адаптері підправити код, що звертається до Класу PayPal.
2.2. Мост (Bridge) - 
	- виведення статів, зображень... у різних виглядах
2.3. Компоновщик (Composite)
	- карта (дерево) сайту
2.4. Декоратор (Decorator) - 
	- розсилка пошти, де буде динамічно добавлятися повідомлення різних типів, інформаційні, сповіщувальні, з поздоровленням у якісь свята, чи просто з динамічною зміною, що може входити у повідомлення не тільки текст, але і картинки чи відео чи файл
2.5. Внедрение Зависимости (Dependency Injection)
	- залежність від Інтерфейсу, клас, де вхідними параметрами у констркторі є об'єкт конкретного класу, щоб не створювати цей об'єкт у середині класу
	- клас який зберігає якусь інформацію, а там уже може бути або у файл або відправляє смс, чи повідомленням на пошту чи у БД, в залежності від налаштувань, у яких один інтерфейс
2.6. Фасад (Facade)
	- авторизація користувача на сайті
	- оформити замовлення (Добавление продукта в корзину, Расчёт стоимости доставки, Расчёт скидки, Генерация заказа)
2.7. Текучий Интерфейс (Fluent Interface)
	- робота з БД, де формується запит DB->$productModel->where('id_category', $id)->orderBy('name', 'desc')->paginate(5); Laravel, Phinx - migration
2.8. Прокси (Proxy
	- коли на сайті буде файл для завантаження, але він завантажуватиметься лише тоді, коли користувач натисне завантажувати, а поки лише отримає інфу про нього (назва, тип, розмір і очікуватиме, дики до нього звернуться, для завантаження, щоб не займати зайву пам'ять)
*****3. Поведенческие шаблоны проектирования (Behavioral):
3.1. Цепочка Обязанностей (Chain Of Responsibilities)
	- перетворення у масив, чи у файл... з якогось типу даних (xml, json, csv, txt)
	- кешування даних, якщо не існує в одній базі (Redis, memCashed), перейти до БД ...
	- логування у файл, у залежності від того, яке повідомлення прийшло (помилка, чи звітність, збереження у БД...)
3.2. Команда (Command)
	- запис у файл, БД.... (редагування, заміна, видалення)
3.3. Итератор (Iterator)
	- масив з обєктами стрічок файла з конфігураціями
	- масив з товарами з магазину, де є різні методи обробки цього масиву, сортування фільтр, нові товари...
3.4. Посредник (Mediator)
	- повязати фронтенд і бекенд (контроллер)
3.5. Хранитель (Memento)
	- адмінка, у якій можна добавляти і видаляти товар, буде бекап робитися обєкта з продуктами для відновлення.
3.6. Наблюдатель (Observer)
	- помилки, логування, 
	- розсилка повыдомлення, новин, підписки
3.7. Стратегия (Strategy)
	- система оплати/доставки при різних розмірах/сумах замовлення
	- адмін/не адмін, авторизований
	- варіанти сортування (який швидчий), в залежності від фільтру
	- мобільна/комп версія, iOS/Android
	- рекомендації продуктів в залежності від часу зареєстрованого чи свята